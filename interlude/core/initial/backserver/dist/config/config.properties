# Порт на котором будет запущен backServer
BACK_PORT = 5555
# Ip-адресс на котором будет запущен backServer
BackServerIP = 127.0.0.1
# IP-адресс вашего веб-сайта для доступа к backServer
# Другие ip будут отклонятся и не получат ответа
# Если вы хотите контролировать порт бексервера сами через iptables/firewall
# то укажите в этот конфиг значение IGNORE_ALL
# вот так: WebsiteIp = IGNORE_ALL
WebsiteIp = 178.93.122.206
# Контроль за состояниями соккетов
# Включить ли передачу OS информации о соккете?
# Ваша OS будет проверять - живой ли соккет
# если нет то он будет закрыт автоматически
# включать если есть лишние 50mb ОЗУ
UseKeepAlivePinging = false

# Ключь инициации запросов. Так же должен быть использован на веб-сервере
# Настоятельно рекомендую придумать самому и по-извращенней. Это ваша защита.
INIT_KEY = ShQyhSnz2HAu4AS

# Настройка подключения к базам ЛОГИН сервера
Driver_ls = com.mysql.jdbc.Driver
URL_ls = jdbc:mysql://localhost/login
Login_ls = root
Password_ls = vertrigo
MaximumDbConnections_ls = 50

# Настройка подключения к базам ГЕЙМ сервера
Driver_gs = com.mysql.jdbc.Driver
URL_gs = jdbc:mysql://localhost/game
Login_gs = root
Password_gs = vertrigo
MaximumDbConnections_gs = 50

# Порт игрового сервера (проверяется для ответа статуса)
GAME_PORT = 7777
# Порт логин сервера для проверки
LOGIN_PORT = 2106

#=========================================
# SQL-запросы в базы логин и гейм сервера.
# Могут быть изменены под любые сборки.
#=========================================
# Выборка онлайна. Результат должен быть 1 строка с 1 столбцом - COUNT(*)
OnlineQueryGS = SELECT COUNT(*) FROM characters WHERE online != '0'
# Валидация регистрации на сущ. аккаунт. <LOGIN> - передаваемый логин веб-сервером
ValidateReg = SELECT COUNT(*) FROM accounts WHERE login = '<LOGIN>'
# Вставка в таблицу данных аккаунта. (?,?,?) - 1=login, 2=password, 3=email
InsertReg = INSERT INTO accounts (login, password, email) VALUES (?,?,?)
# Заполняем таблицу с балансом для работы с личным кабинетом(баланс)
RegCpValues = INSERT INTO scoria_cp (account, balance) VALUES (?, 0)
# Получение кол-ва аккаунтов
AccountNum = SELECT COUNT(*) FROM accounts
# Получение кол-ва персонажей
CharNum = SELECT COUNT(*) FROM characters
# Получение строки персонажей TOP PVP. В запросе должно быть 5 столбцов - 1:charname, 2:level, 3:pvpkills, 4:pkkills, 5:online, 6:clan_name
TopPvpChars = SELECT a.char_name,a.level,a.pvpkills,a.pkkills,a.online,b.clan_name,a.clanid,b.clan_id FROM characters a left outer join clan_data b on b.clan_id = a.clanid ORDER by pvpkills DESC LIMIT 25
# Получение строки персонажей TOP PK. В запросе должно быть 5 столбцов - 1:charname, 2:level, 3:pvpkills, 4:pkkills, 5:online, 6:clan_name
TopPkChars = SELECT a.char_name,a.level,a.pvpkills,a.pkkills,a.online,b.clan_name,a.clanid,b.clan_id FROM characters a left outer join clan_data b on b.clan_id = a.clanid ORDER by pkkills DESC LIMIT 25
# Получение строки персонажей TOP LVL. В запросе должно быть 5 столбцов - 1:charname, 2:level, 3:pvpkills, 4:pkkills, 5:online, 6:clan_name
TopLvlChars = SELECT a.char_name,a.level,a.pvpkills,a.pkkills,a.online,b.clan_name,a.clanid,b.clan_id FROM characters a left outer join clan_data b on b.clan_id = a.clanid ORDER by level DESC LIMIT 25
# Получение строки кланов TOP CLAN. В запросе должно быть 1:clan_name, 2:clan_level, 3: reputation_score, 4:owner_name
TopClan = SELECT b.char_name,a.clan_name,a.clan_level,a.reputation_score,b.obj_Id,a.leader_id FROM clan_data a, characters b WHERE a.leader_id = b.obj_Id ORDER by a.clan_level DESC LIMIT 25
# Получение строки замков
CastleInfo = SELECT a.id,a.name,a.siegeDayOfWeek,a.siegeHourOfDay,a.taxPercent,b.clan_name,b.hasCastle FROM castle a left outer join clan_data b on b.hasCastle = a.id
# Проверка логина и мыла для востановления пароля
RecoveryCheckLoginMail = SELECT COUNT(*) FROM accounts WHERE login = '<LOGIN>' AND email = '<EMAIL>'
# Проверка на возможный брут (перебор)
RecoveryCheckByRemoteIp = SELECT COUNT(*) FROM scoria_recovery WHERE ip = '<IP>' AND time > '<INIT_TIME>'
# Проверка на уже совершенный запрос востановления пароля
RecoveryCheckByLoginDaily = SELECT COUNT(*) FROM scoria_recovery WHERE login = '<LOGIN>' AND time > '<INIT_TIME>'
# Вставка данных в временную таблицу, до подтверждения с email
RecoveryInsertAssignedValue = INSERT INTO scoria_recovery (`login`, `password`, `email`, `hash`, `ip`, `time`) VALUES (?, ?, ?, ?, ?, ?)
# Получение логина и пароля по хеш-отпечатку и времени
RecoveryGetLoginPwdByHash = SELECT login,password,email FROM scoria_recovery WHERE hash = '<R_HASH>' AND time > '<INIT_TIME>'
# Обновление пароля в таблице accounts после валидации с почты
RecoveryUpdateValuesByValidate = UPDATE accounts SET password = ? WHERE login = ? AND email = ? LIMIT 1
# Удаление всех ненужных строк связанных с аккаунтом из таблицы scoria_recovery после обновления пароля
RecoveryRemoveOldValue = DELETE FROM scoria_recovery WHERE login = ?
# Проверка персонажа на наличие в игре
CheckCharOnlineStatus = SELECT online FROM characters WHERE char_name = '<CHAR>'
# Получение obj_id персонажа
GetObjIdCharacter = SELECT obj_Id from characters WHERE char_name = '<CHAR>'
# Проверка на наличие у игрока определенного предмета
CheckCharHasItemById = SELECT * FROM items WHERE owner_id = '<CHARID>' AND item_id = '<ITEMID>'
# Обновление количества существующих предметов у персонажа
UpdateExistItemById = UPDATE `items` SET `count` = count+? WHERE `owner_id` = ? AND `item_id` = ?
# Получение макс. количества object_id из таблицы items
GetLastItemId = SELECT `object_id` FROM items ORDER BY `object_id` DESC LIMIT 1
# Добавление предмета персонажу
InsertItemById = INSERT INTO items (owner_id, object_id, item_id, count, loc, loc_data) values('<CHARID>', '<OBJECT>', '<ITEMID>', '<COUNT>', 'INVENTORY', '0')
#=============================================
# Запросы личного кабинета 
# Могут быть изменены под любые сборки
#=============================================
# Запрос на валидацию авторизации. Данные - <LOGIN> = логин, <PWD> = пароль, <EMAIL> = мыло. Результат - count_rows, int
CPRequestAuth = SELECT COUNT(*) FROM accounts WHERE login = '<LOGIN>' AND password = '<PWD>' AND email = '<EMAIL>' AND access_level >= 0
# Запрос получения пароля при сущ. security_cookie(для проверки авторизации, в куках пароль в md5(base64(sha(pack(h))))
CpRequestShaPwd = SELECT password FROM accounts WHERE login = '<LOGIN>' AND email = '<EMAIL>' AND security_cookie = '<COOKIE>' LIMIT 1
# Обновление сессий (security_cookie) для пользователя(с учетом login, password)
CpUpdateSecurityCookie = UPDATE accounts SET security_cookie = ? WHERE login = ? AND password = ? LIMIT 1
# Получение ип-ов привязки аккаунта для CP
CpGetIpAllowed = SELECT allowed_ip FROM accounts WHERE login = '<LOGIN>' LIMIT 1
# Получение массива привязка_ип:последний_ип
CpGetLastIp = SELECT allowed_ip,lastIP FROM accounts WHERE login = '<LOGIN>' LIMIT 1
# Смена email для пользователя через ЦУП(если разрешено)
CpUpdateEmail = UPDATE accounts SET email = ? WHERE email = ? AND login = ?
# Получение списка персонажей аккаунта
CpGetCharList = SELECT char_name, level, pvpkills, pkkills FROM characters WHERE account_name = '<LOGIN>'
# Получение списка забаненых чаров
CpGetBannedCharList = SELECT obj_Id,char_name FROM characters WHERE account_name = '<LOGIN>' AND accesslevel <= '<ACC_LEVEL>'
# Получение списка не забаненых чаров
CpGetClearCharList = SELECT obj_Id,char_name FROM characters WHERE account_name = '<LOGIN>' AND accesslevel = '<ACC_LEVEL>'
# Получение баланса аккаунта (таблица scoria_cp)
CpGetAccountBalance = SELECT balance FROM scoria_cp WHERE account = '<LOGIN>'
# Получение времени последнего телепорта персонажа
CpGetLastTpTime = SELECT lastcptp FROM characters WHERE account_name = '<LOGIN>' AND obj_Id = '<CHAR>' AND accesslevel = '0' AND online = '0'
# Обновление {x;y;z} координат при телепорте чара в город в цуп-е
CpUpdateXYZCords = UPDATE characters SET x = ?, y = ?, z = ?, lastcptp = ? WHERE obj_Id = ? AND account_name = ?
# Получение логов ЦУП-а по платежам
CpGetLoggByPayment = SELECT date,note,count,method FROM scoria_cp_log WHERE account = '<LOGIN>' ORDER by id DESC LIMIT 5
# Проверка на принадлежность персонажа аккаунту
CpCheckObjForAcc = SELECT char_name FROM characters WHERE account_name = '<LOGIN>' AND obj_Id = '<OBJECTID>' AND accesslevel = '0' AND online = '0'
# Снятие денег с личного кабинета
CpLooseAccountMoney = UPDATE scoria_cp SET balance = ? WHERE account = ?